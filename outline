
- Intro
-- Prepared for Class
-- Go Versus Perl
-- Why Use Go?
--- speed
--- concurrency
--- cross-platform static binaries
---- GOOS=windows GOARCH=amd64 go build
- $GOPATH, the Go Toolchain, and the Go Ecosystem
-- go build and go run
-- go test
-- go fmt
-- go vet
-- golint
-- golang.org
-- godoc and godoc.org
- Basics
-- Go Naming Conventions
-- Variables, Type Declarations, & Function Calls
-- Package main and function main
-- The log package
--- logging messages and fatal errors
-- Printing output to stdout/stderr with the fmt package
-- Reading strings from the command line and turning them into numbers
-- Data Structures
--- arrays and slices
---- creating, modifying, checking length
--- Getting command line arguments via os.Args
---- exercise1 - minimal RPN calculator
--- maps
--- structs
--- pointers
-- Unit Testing with "go test"
-- Defining Functions
-- Control Structures
-- Error Handling
-- Importing (1)
---- core packages only
-- Importing (2)
--- external packages
--- load without importing symbols
- Types, Interfaces, and OO in Go
-- Method Calls
-- Defining Types
-- Interfaces
-- Type Switch
- Packages
-- go get
-- File Layout
-- Importing Your Own Packages
-- Package Management
-- Reproducible Builds with Godep
- Concurrency with Channels
-- Goroutines
-- Fire and Forget Example
-- Message Passing Example
-- Parallelization

- godoc
- JSON
- defer, panic, recover
-- when to use it (inside a package or for unrecoverable errors)
- good error handling practices - http://blog.golang.org/error-handling-and-go
- reflection and when to use it vs "go generate"
- profiling
