- Intro
-- Prepared for Class
-- Go Versus Perl
-- Why Use Go?
--- speed
--- concurrency
--- cross-platform static binaries
---- GOOS=windows GOARCH=amd64 go build
- $GOPATH, the Go Toolchain, and the Go Ecosystem
-- go build and go run
-- go test
-- go fmt
-- go vet
-- golint
-- golang.org
-- godoc and godoc.org
- Basics
-- Go Naming Conventions
-- Variables, Type Declarations, & Function Calls
-- Defining Functions
-- Package main and function main
-- Importing (1)
---- core packages only
-- Printing output to stdout/stderr with the fmt package
-- Reading strings from the command line and turning them into numbers
-- If/else
--- checking err != nil
-- The log package
--- logging messages and fatal errors
-- Getting command line arguments via os.Args
---- exercise1 - minimal RPN calculator
- More Syntax, Types, and Language Details
-- Data Structures
--- arrays and slices
---- creating, modifying, checking length
--- maps
--- structs
--- pointers
-- First Class Functions
-- More Control Structures
--- for loops - C style & range
--- switch statements
-- Error Handling
- Unit Testing with "go test"
- Types, Interfaces, and OO in Go
-- Method Calls
-- Interfaces
-- Type Switch
- Concurrency with Channels
-- Goroutines
-- Fire and Forget Example
-- Message Passing Example
-- Parallelization
- Package Management
-- go get
-- Importing Your Own Packages
-- Package Management
-- Reproducible Builds with Godep

- Bonus Slides
-- godoc
-- JSON
-- defer, panic, recover
--- when to use it (inside a package or for unrecoverable errors)
-- reflection and when to use it vs "go generate"
-- profiling


Include?

-- Importing (2)
--- external packages
--- renaming packages on import
--- load without importing symbols
